name: Create a New Idea Markdown File on Issue Approval

on:
  issues:
    types: [closed]

permissions:
  contents: write
  pull-requests: write

jobs:
  create-markdown:
    if: github.event.issue.state == 'closed' && contains(github.event.issue.labels.*.name, 'approved')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Debugging step - Print Issue Info
        run: |
          echo "Issue Number: ${{ github.event.issue.number }}"
          echo "Issue Title: ${{ github.event.issue.title }}"
          echo "Issue Body: ${{ github.event.issue.body }}"

      - name: Check if Issue Number is Set
        run: |
          if [ -z "${{ github.event.issue.number }}" ]; then
            echo "Error: ISSUE_NUMBER is not set. Exiting."
            exit 1
          fi

      - name: Generate Markdown content using OpenAI API
        id: generate_md
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          ISSUE_BODY=$(printf '%s' "${{ github.event.issue.body }}" | jq -Rs .)  # Escape special characters using jq
          echo "Debugging log: ISSUE_BODY content:"
          echo "$ISSUE_BODY"
          MD_CONTENT=$(bash .github/workflows/generate_markdown.sh "$ISSUE_BODY")
          echo "$MD_CONTENT" > "1-Atoms--atomic-ideas/active/issue-${{ github.event.issue.number }}.md"
          echo "Created markdown file: 1-Atoms--atomic-ideas/active/issue-${{ github.event.issue.number }}.md"
      
      - name: Extract Tags from Markdown and Rename File
        id: rename_md
        run: |
          # Extract the line containing "**Tags:**" from the markdown file
          FILE_PATH="1-Atoms--atomic-ideas/active/issue-${{ github.event.issue.number }}.md"
          FIRST_LINE=$(grep '\*\*Tags:\*\*' "$FILE_PATH")
          
          # Debugging step: Print the extracted line
          echo "Extracted line: $FIRST_LINE"
          
          # Use sed to extract content between $${ and $$, then clean it
          TAGS=$(echo "$FIRST_LINE" | sed -n 's/.*\$\${\(.*\)\}\$\$/\1/p' | sed -e 's/\\color{[^}]*}//g' -e 's/\\space//g' -e 's/\[\|\]//g' -e 's/{[^}]*}//g' -e 's/\\textbf{[^}]*}//g' -e 's/,/ /g' -e 's/[[:space:]]\+/ /g')
      
          # Debugging step: Print the extracted tags
          echo "Extracted tags: $TAGS"
      
          # Remove any remaining braces or special characters
          CLEAN_TAGS=$(echo "$TAGS" | sed -e 's/[{}]//g')
      
          # Clean up the tags by trimming leading/trailing spaces, replacing spaces with hyphens, and converting to lowercase
          CLEAN_TAGS=$(echo "$CLEAN_TAGS" | sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*$//g' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
      
          # Debugging step: Print the cleaned tags
          echo "Cleaned tags: $CLEAN_TAGS"
          
          # Define the new file name
          NEW_FILE_NAME="$M-A-{CLEAN_TAGS}-i${{ github.event.issue.number }}.md"
          NEW_FILE_PATH="1-Atoms--atomic-ideas/active/$NEW_FILE_NAME"
          
          # Rename the file
          mv "$FILE_PATH" "$NEW_FILE_PATH"

      - name: Check if markdown file exists
        id: file-check
        run: |
          NEW_FILE_PATH="1-Atoms--atomic-ideas/active/${{ steps.rename_md.outputs.new_file_path }}"
          if [ -f "$NEW_FILE_PATH" ]; then
            echo "file_exists=true" >> $GITHUB_ENV
          else
            echo "file_exists=false" >> $GITHUB_ENV
          fi

      - name: Handle file existence and create PR if needed
        if: env.file_exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}  # Provide GitHub token for authentication
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          TIMESTAMP=$(date +%s)  # Generate a Unix timestamp
          BRANCH_NAME="pr-for-issue-${ISSUE_NUMBER}-${TIMESTAMP}"
          git pull main
          git merge main
          
          # Create a new branch for the update
          git checkout -b "$BRANCH_NAME"
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          
          # Add and commit the changes
          git add "1-Atoms--atomic-ideas/active/${{ steps.rename_md.outputs.new_file_name }}"
          git commit -m "Update markdown file for issue #${ISSUE_NUMBER}" || echo "No changes to commit"
          
          # Push the branch
          git push --set-upstream origin "$BRANCH_NAME" || echo "No new commits to push"
          
          # Create a pull request using the GitHub CLI
          gh pr create --title "Update markdown for issue #${ISSUE_NUMBER}" --body "This PR updates the markdown file for issue #${ISSUE_NUMBER}." || echo "Failed to create PR"

      - name: Commit the new markdown file if it doesn't exist
        if: env.file_exists == 'false'
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git status  # Check if there are any changes to commit
          git pull main
          git merge main
          git add "1-Atoms--atomic-ideas/active/${{ steps.rename_md.outputs.new_file_name }}"
          git commit -m "Add markdown file for issue #${ISSUE_NUMBER}" || echo "No changes to commit"
          git push || echo "No new commits to push"
